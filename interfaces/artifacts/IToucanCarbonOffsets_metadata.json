{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAttributes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "projectId",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "standard",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "methodology",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "region",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "storageMethod",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "method",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "emissionType",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "category",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "controller",
								"type": "address"
							}
						],
						"internalType": "struct ProjectData",
						"name": "",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "uint64",
								"name": "startTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "endTime",
								"type": "uint64"
							},
							{
								"internalType": "uint256",
								"name": "projectTokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint64",
								"name": "totalVintageQuantity",
								"type": "uint64"
							},
							{
								"internalType": "bool",
								"name": "isCorsiaCompliant",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isCCPcompliant",
								"type": "bool"
							},
							{
								"internalType": "string",
								"name": "coBenefits",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "correspAdjustment",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "additionalCertification",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							}
						],
						"internalType": "struct VintageData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDepositCap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGlobalProjectVintageIdentifiers",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRemaining",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "remaining",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "retiringEntityString",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "beneficiaryString",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "retirementMessage",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mintCertificateLegacy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "retire",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "retiringEntityString",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "beneficiaryString",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "retirementMessage",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "retireAndMintCertificate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "retireFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
				},
				"approve(address,uint256)": {
					"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the amount of tokens owned by `account`."
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
				},
				"totalSupply()": {
					"details": "Returns the amount of tokens in existence."
				},
				"transfer(address,uint256)": {
					"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"interfaces/IToucanCarbonOffsets.sol": "IToucanCarbonOffsets"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f",
			"license": "MIT",
			"urls": [
				"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f",
				"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"interfaces/IToucanCarbonOffsets.sol": {
			"keccak256": "0xbbc92eabd5a13c00bd41de9fb3f3cef4d9b635871522675954118d4445a93d03",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://119f5148019e0f6136d20a65a06e59c3d6e0873a7ed93010393db6108a54b1eb",
				"dweb:/ipfs/QmUpzG45GEqdEd3BQacGUz8UdckH5UfkJa9nN6Djhtjeov"
			]
		},
		"interfaces/types/CarbonProjectTypes.sol": {
			"keccak256": "0x0e563aa0e89301d00a6dae1f30b692ac9aebcac9c89ccab9e25d1f6dc6a53924",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://f9cf4fb3022c32da4f54f0bfbd12411ebf4f01cd49d057479998af56b39bc3cf",
				"dweb:/ipfs/QmbqwsSHjCCoKezsCakVRH81F55GFZq3tJHvkcGN5ZJy4n"
			]
		},
		"interfaces/types/CarbonProjectVintageTypes.sol": {
			"keccak256": "0x6ee78189bd3fd0fe7f9541e20e91b10768d7d78bb347e8e064e9875b12c75163",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://054644a555d99387be7b9578962b4d1324c50d6e7f3a56373c09831ccad18f8f",
				"dweb:/ipfs/QmXzbgMjL5Yj5NMFQmNUDhsK92p4xh8rysX7zefP6hro9s"
			]
		}
	},
	"version": 1
}